Отчет о реализации проекта "Онлайн-Магазин"
========================================

Выполнил
--------------
Студент группы БПМИ145 2-го курса ПМИ ФКН ВШЭ
Кондрашов Филипп
(В рамках полугодового проекта, расчитанного на второй семестр)

Итоговый результат
--------------
Реализован онлайн-магазин, удовлетворяющий основным требованиям.
С результатом можно ознакомиться в репозитории:

[Ссылка] []
[Ссылка]: https://github.com/feelemon/OnlineMagazine


Формальная постановка задачи
-----------------
_Цитата из wiki.cs.hse.ru:_
>Сервис состоит из: витрины/каталога товаров, разбитых по категориям; корзины, в которую пользователь может добавлять покупки; для электронных товаров реализована возможность скачать (или получить по почте) и оплата с помощью PayPal (наиболее простой для интеграции, для проекта достаточно показать работу с разработческим апи PayPal) или другими системами оплаты. Для неэлектронных товаров должна быть возможность указать их наличие, при покупке количество изменяется. В магазине могут быть промоакции: скидка при оформлении заказа по промокоду, скидка при заказе на определенную сумму, временная скидка на конкретную категорию товаров.


Реализация формальных критериев
-------------------------------
**Минимальная функциональность:**

    + Витрина магазина с категориями
    + Корзина пользователя, в которую можно добавлять или удалять товары.
    + После оформления заказа, письмо с данными о заказе и пользователе отправляется на почту владельца магазина
    + Приложение защищено от инъекций к базе

**На хорошо:**

    + Приложение работает с неэлектронными товарами, меняется количество доступного товара.
    - Приложение защищено от XSS-атак.

**На отлично:**

    + В приложении есть возможность оплатить с помощью сервисов онлайн-платежей.
    +/-Сервис готов к запуску (по чеклисту выполнено все или почти все)


Работа над проектом
-------------------


### Модели

Следуя стандартам Django, классы моделей, используемые в проекте блыли реализованы в файле models.py.

Список реализованых моделей (каждая из которых унаследована от класса _django.db.models.Model_):

* User - пользователь, зарегистрированный с помощью стандартной формы или социальной сети;
* Post - продукт, созданный владельцем сайта с набором свойств;
* Item - объект товара, наследующий все свойства продукта;
* Category - котегория товара, указанная при создании товара, использующаяся для отображения разных каталогов;

___
В качестве примера можно взглянуть на реализацию класса модели Post:

    class Post(models.Model):
    author = models.ForeignKey('auth.User')
    title = models.CharField(max_length=200, verbose_name='Название Товара')
    text = models.TextField()
    cost = models.IntegerField(default=0, verbose_name='Цена')
    number = models.IntegerField(default=1, verbose_name='Количество')
    image = models.FileField(null=True, blank=True)
    # cost = models.IntegerField(label='cost',  max_length=5)
    created_date = models.DateTimeField(
        default=timezone.now)
    published_date = models.DateTimeField(
        blank=True, null=True)
    alias = models.SlugField(verbose_name='Alias товара')

    category = models.ForeignKey(Category)

    class Meta:
        verbose_name = 'Товар'
        verbose_name_plural = 'Товары'


    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse("posts:detail", kwargs={"id": self.id})


Более подробно схему базы данных и отношения между моделями можно узнать из файла ER-Diagram.pdf, находящегося в репозитории.

### Шаблоны


    base.html - оболочка для остальных страниц, содержащая top-menu, bot-menu и подключаемые с помощью "{% extends ... %}"

    login.html - форма авторизации пользователя

    register.html - страница стандартной формы регистрации пользователя

    post_list.html - главная страница онлайн-магазина

    post_detail.html - страница, представляющая основную информацию о продукте

    post_new.html - страница с формой для создания нового товара

    post_edit.html - страница с заполненными формами редактируемого товара

    backet.html - корзина, содержащая покупаемые товары

    locus.html - страница контактов, содержащая подробную информацию об онлайн-магазине

    payment.html - сведения об оплате через онлайн-сервис



### Фронтенд и дизайн

В ходе работы был спроектирован один вариант интерфейса, время от времени пополняющийся новым контентом. Работа над внешней составляющей и удобством использования продолжалась в течение всего срока разработки магазина. Небольшой опыт в веб-разработке позволил достич желаемого минимализма в структуре и облике сайта, что сделало магазин более удобным.

Для достижения конечного результата испольовались внешние ресурсы:

* Twitter Bootstrap  -  удобная CSS библиотека, предоставляющая множество дополнительных элементов (кнопки, иконки, макет шапки)
* Yandex API - вспомогательный инструмент для работы с картами.
* Google Fonts - подключение шрифтов

Для введения новых особенностей использовалась анимация на CSS (анимирование ссылок при наведении, украшение изображений каталогов при наведении)
### Работа бекенда

Для получения обратной связи клиентом посланный им запрос идентифицируется с помощью паттернов в файле urls.py. Далее необходимые аругменты передаются на вход некоторой функции из view.py, которая, в свою очередь, выполняя определенные действия, возвращает, если требуется, новую страницу.

Приведем пример.
Пусть пользователь находится в общем списке товаров. Теперь он хочет перейти в определенную категорию в каталоге и кликает на соответвующую ссылку.

Данная ссылка в коде шаблона задается так:

```python
    href="{% url 'rock' %}"
```

Она удовлетворяет следующему паттерну:

```python
    url(r'^rock/$', views.rock, name='rock'),
```

Соответсвенно, далее вызывается функция `def category_rock(request)`:
```python
def category_rock(request):
    posts = Post.objects.filter(category__alias='Rock').order_by('-published_date')
    return render(request, 'magazine/post_list.html', {'posts': posts})

```
Пользователю возвращается шаблон для данного списка с товарами.
Таким образом, юзер перешел на запрашиваемую страницу. Заметим, что ее url удовлетворяет регулярному выражению


### Features

#### Калькулятор покупок

Помимо информации о заказе, который присутствует в обычной корзине каждого пользователя, так же имеется виджет, который позволяет узнать всю необходимую информацию о нынешней покупке. Виджет динамически обновляется с добавлением товара в корзину и всегда остается на виду у покупателя, что позволяет заранее расчитать стоимость покупки. Реализация данного функционала:

```jquery
$(function(){
            var arr1 = $.cookie('cart');
            if (!arr1) {
                arr1 = '[]';
            }
            var json2 = $.parseJSON(arr1);
        var sum1 = 0;
         $.each(json2, function(index, value) {
                sum1 = sum1 + parseInt(value['price']);
            });
            $('.cart .sum').text(sum1);
```


#### Администрирование и блокировка
Django предоставляет администрирование для созданных админов. Используя данную возможность, войдя со специального url, можно просматривать и исправлять все поля всех объектов.

Соответственно, администратор может изменять и удалять весь контент в магазине.

#### Оплата наличными при получении товара

Форма, позволяющая купить товар за наличные деньги с доставкой или при помощи самовывоза, доступна каждому пользователю, при желании можно посмотреть состояние продукта перед покупкой, что улучшает сервис, делая его более удобным. При такого типа оплаты производится оповещение владельца сайта по почте.

#### Оплата через PayPal

Форма оплаты, реализованная с помощью PayPal API, позволяет расплачиваться электронными деньгами при помощи перевода средств на счет владельца магазина.

### Ещё:

* Сохранение корзины после закрытия страницы
* Возможность авторизации через социальную сеть Вконтакте
* Сортировка товаров по дате создания или изменения в каждом разделе каталога
